#+TITLE:       Sendwave Pants Docker Plugin
#+AUTHOR:      Nathan Rosenbloom, Jean Cochrane
#+EMAIL:       engineering@sendwave.com
#+DESCRIPTION: Docker Plugin Documentation

* Version 1.1.2

This package contains an implementation of a plugin for the [[https://www.pantsbuild.org/][pants
build system]] to build docker images from pants build targets.

* Requirements

This plugin supports pantsbuild 2.13 and requires python >=3.8 to be
installed, as well as transitively any other pants dependencies.

* Installation

To install from pypi in an existing pantsbuild project add to your
pants.toml file:

#+NAME: pants.toml
#+BEGIN_SRC: toml
[GLOBAL]
plugins = ["sendwave-pants-docker~=1.1"]
backend_packages = ["sendwave.pants_docker"]
#+END_SRC


* Overview
This plugin adds the 'docker' target that can be used with `pants
package` to build a docker image. Ensure that you have docker
installed & the daemon running when attempting to build an image.

The plugin will generate a Dockerfile & then then build that
dockerfile in a build context containing all dependent source files
(after stripping source roots). All source files will be copied into
the =/application/= directory in the generated image.

Python requirements will be installed into a virtualenv in the docker
image, which is activated by updating the PATH environment variable in
the generated imaage.

See =$ pants help docker= for information on possible values for the
docker target.

* Using external layer cache sources
Images built with this plugin can be configured for
[[https://docs.docker.com/engine/reference/commandline/build/#specifying-external-cache-sources][external layer cache sources]]
via the =build_cache= and =buildkit_inline_cache= fields on the
=docker= target. Note that both of these fields require
[[https://docs.docker.com/develop/develop-images/build_enhancements/][BuildKit]]
to be installed.

To enable writing inline layer caches for an image, set the field
=buildkit_inline_cache=True= on the target. If you would like to use
the built image as an external cache, tag it after packaging and push
it to a remote repository using =docker tag= and =docker push=.

To enable reading inline layer caches for an image, including from
external cache sources, set the field =build_cache=<your-image-cache>=
on the target. If you're reading a cache from a private registry, you
will also have to pass your Docker config file into the pants process
so that pants knows how to authenticate your cache pull request; the
easiest way to do this is simply to set the =DOCKER_CONFIG= environment
variable for the pants process, e.g. =DOCKER_CONFIG="$HOME/.docker" ./pants package ...=.

* Developing plugins
To add support for more targets in subsequent plugins (i.e. to
plug-into this plugin) add a rule mapping your Target/FieldSet to a
DockerComponent dataclass. Then add a
=UnionRule(DockerComponentFieldSet, {YourRuleInput}=, the =sources= in
the DockerComponent will be copied into the image and the =commands=
will be executed in the generated DockerFile.
* ChangeLog
* 1.1.2
+ Add support for cache_from field to configure remote caches via `docker build --cache-from`
+ Add support for buildkit_inline_cache field to set `--build-arg BUILDKIT_INLINE_CACHE=1`
+ Add support for multiline_pip_install field to `RUN pip install` on multiple lines (one per dependency) or one line for all dependencies
* 1.1.1
+ Fix too strict python interpreter version to allow any python version 3.8 or greater
* 1.1.0
+ Update plugin for compatibility with pants version 2.13
+ No user facing changes, but changes how lockfiles set via `requirement_constraints` are handled
* 1.0.1
+ Remove pants level docker process caching - we will not cache the image generation results from one pants run to another.
+ Log more information from the docker process
* 1.0
Initial Public Release
* License
See COPYING for the text of the Apache License which governs this
package.
